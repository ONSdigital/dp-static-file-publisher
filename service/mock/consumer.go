// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-static-file-publisher/event"
	"github.com/ONSdigital/dp-static-file-publisher/service"
	"sync"
)

var (
	lockEventConsumerMockClose   sync.RWMutex
	lockEventConsumerMockConsume sync.RWMutex
)

// Ensure, that EventConsumerMock does implement service.EventConsumer.
// If this is not the case, regenerate this file with moq.
var _ service.EventConsumer = &EventConsumerMock{}

// EventConsumerMock is a mock implementation of service.EventConsumer.
//
//     func TestSomethingThatUsesEventConsumer(t *testing.T) {
//
//         // make and configure a mocked service.EventConsumer
//         mockedEventConsumer := &EventConsumerMock{
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             ConsumeFunc: func(ctx context.Context, messageConsumer event.MessageConsumer, handler event.Handler)  {
// 	               panic("mock out the Consume method")
//             },
//         }
//
//         // use mockedEventConsumer in code that requires service.EventConsumer
//         // and then make assertions.
//
//     }
type EventConsumerMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// ConsumeFunc mocks the Consume method.
	ConsumeFunc func(ctx context.Context, messageConsumer event.MessageConsumer, handler event.Handler)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Consume holds details about calls to the Consume method.
		Consume []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageConsumer is the messageConsumer argument value.
			MessageConsumer event.MessageConsumer
			// Handler is the handler argument value.
			Handler event.Handler
		}
	}
}

// Close calls CloseFunc.
func (mock *EventConsumerMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("EventConsumerMock.CloseFunc: method is nil but EventConsumer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockEventConsumerMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockEventConsumerMockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedEventConsumer.CloseCalls())
func (mock *EventConsumerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockEventConsumerMockClose.RLock()
	calls = mock.calls.Close
	lockEventConsumerMockClose.RUnlock()
	return calls
}

// Consume calls ConsumeFunc.
func (mock *EventConsumerMock) Consume(ctx context.Context, messageConsumer event.MessageConsumer, handler event.Handler) {
	if mock.ConsumeFunc == nil {
		panic("EventConsumerMock.ConsumeFunc: method is nil but EventConsumer.Consume was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		MessageConsumer event.MessageConsumer
		Handler         event.Handler
	}{
		Ctx:             ctx,
		MessageConsumer: messageConsumer,
		Handler:         handler,
	}
	lockEventConsumerMockConsume.Lock()
	mock.calls.Consume = append(mock.calls.Consume, callInfo)
	lockEventConsumerMockConsume.Unlock()
	mock.ConsumeFunc(ctx, messageConsumer, handler)
}

// ConsumeCalls gets all the calls that were made to Consume.
// Check the length with:
//     len(mockedEventConsumer.ConsumeCalls())
func (mock *EventConsumerMock) ConsumeCalls() []struct {
	Ctx             context.Context
	MessageConsumer event.MessageConsumer
	Handler         event.Handler
} {
	var calls []struct {
		Ctx             context.Context
		MessageConsumer event.MessageConsumer
		Handler         event.Handler
	}
	lockEventConsumerMockConsume.RLock()
	calls = mock.calls.Consume
	lockEventConsumerMockConsume.RUnlock()
	return calls
}
