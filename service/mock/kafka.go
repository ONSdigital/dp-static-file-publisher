// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	kafkaV3 "github.com/ONSdigital/dp-kafka/v3"
	"github.com/ONSdigital/dp-static-file-publisher/service"
	"sync"
)

// Ensure, that KafkaConsumerV3Mock does implement service.KafkaConsumerV3.
// If this is not the case, regenerate this file with moq.
var _ service.KafkaConsumerV3 = &KafkaConsumerV3Mock{}

// KafkaConsumerV3Mock is a mock implementation of service.KafkaConsumerV3.
//
// 	func TestSomethingThatUsesKafkaConsumerV3(t *testing.T) {
//
// 		// make and configure a mocked service.KafkaConsumerV3
// 		mockedKafkaConsumerV3 := &KafkaConsumerV3Mock{
// 			RegisterBatchHandlerFunc: func(ctx context.Context, batchHandler kafkaV3.BatchHandler) error {
// 				panic("mock out the RegisterBatchHandler method")
// 			},
// 			StartFunc: func() error {
// 				panic("mock out the Start method")
// 			},
// 		}
//
// 		// use mockedKafkaConsumerV3 in code that requires service.KafkaConsumerV3
// 		// and then make assertions.
//
// 	}
type KafkaConsumerV3Mock struct {
	// RegisterBatchHandlerFunc mocks the RegisterBatchHandler method.
	RegisterBatchHandlerFunc func(ctx context.Context, batchHandler kafkaV3.BatchHandler) error

	// StartFunc mocks the Start method.
	StartFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// RegisterBatchHandler holds details about calls to the RegisterBatchHandler method.
		RegisterBatchHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BatchHandler is the batchHandler argument value.
			BatchHandler kafkaV3.BatchHandler
		}
		// Start holds details about calls to the Start method.
		Start []struct {
		}
	}
	lockRegisterBatchHandler sync.RWMutex
	lockStart                sync.RWMutex
}

// RegisterBatchHandler calls RegisterBatchHandlerFunc.
func (mock *KafkaConsumerV3Mock) RegisterBatchHandler(ctx context.Context, batchHandler kafkaV3.BatchHandler) error {
	if mock.RegisterBatchHandlerFunc == nil {
		panic("KafkaConsumerV3Mock.RegisterBatchHandlerFunc: method is nil but KafkaConsumerV3.RegisterBatchHandler was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		BatchHandler kafkaV3.BatchHandler
	}{
		Ctx:          ctx,
		BatchHandler: batchHandler,
	}
	mock.lockRegisterBatchHandler.Lock()
	mock.calls.RegisterBatchHandler = append(mock.calls.RegisterBatchHandler, callInfo)
	mock.lockRegisterBatchHandler.Unlock()
	return mock.RegisterBatchHandlerFunc(ctx, batchHandler)
}

// RegisterBatchHandlerCalls gets all the calls that were made to RegisterBatchHandler.
// Check the length with:
//     len(mockedKafkaConsumerV3.RegisterBatchHandlerCalls())
func (mock *KafkaConsumerV3Mock) RegisterBatchHandlerCalls() []struct {
	Ctx          context.Context
	BatchHandler kafkaV3.BatchHandler
} {
	var calls []struct {
		Ctx          context.Context
		BatchHandler kafkaV3.BatchHandler
	}
	mock.lockRegisterBatchHandler.RLock()
	calls = mock.calls.RegisterBatchHandler
	mock.lockRegisterBatchHandler.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *KafkaConsumerV3Mock) Start() error {
	if mock.StartFunc == nil {
		panic("KafkaConsumerV3Mock.StartFunc: method is nil but KafkaConsumerV3.Start was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc()
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedKafkaConsumerV3.StartCalls())
func (mock *KafkaConsumerV3Mock) StartCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}
