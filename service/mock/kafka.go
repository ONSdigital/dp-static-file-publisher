// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	kafka "github.com/ONSdigital/dp-kafka/v3"
	"github.com/ONSdigital/dp-static-file-publisher/service"
	"sync"
)

// Ensure, that KafkaConsumerMock does implement service.KafkaConsumer.
// If this is not the case, regenerate this file with moq.
var _ service.KafkaConsumer = &KafkaConsumerMock{}

// KafkaConsumerMock is a mock implementation of service.KafkaConsumer.
//
//	func TestSomethingThatUsesKafkaConsumer(t *testing.T) {
//
//		// make and configure a mocked service.KafkaConsumer
//		mockedKafkaConsumer := &KafkaConsumerMock{
//			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
//				panic("mock out the Checker method")
//			},
//			CloseFunc: func(ctx context.Context) error {
//				panic("mock out the Close method")
//			},
//			RegisterBatchHandlerFunc: func(ctx context.Context, batchHandler kafka.BatchHandler) error {
//				panic("mock out the RegisterBatchHandler method")
//			},
//			StartFunc: func() error {
//				panic("mock out the Start method")
//			},
//			StateWaitFunc: func(state kafka.State)  {
//				panic("mock out the StateWait method")
//			},
//			StopFunc: func() error {
//				panic("mock out the Stop method")
//			},
//		}
//
//		// use mockedKafkaConsumer in code that requires service.KafkaConsumer
//		// and then make assertions.
//
//	}
type KafkaConsumerMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// RegisterBatchHandlerFunc mocks the RegisterBatchHandler method.
	RegisterBatchHandlerFunc func(ctx context.Context, batchHandler kafka.BatchHandler) error

	// StartFunc mocks the Start method.
	StartFunc func() error

	// StateWaitFunc mocks the StateWait method.
	StateWaitFunc func(state kafka.State)

	// StopFunc mocks the Stop method.
	StopFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// RegisterBatchHandler holds details about calls to the RegisterBatchHandler method.
		RegisterBatchHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BatchHandler is the batchHandler argument value.
			BatchHandler kafka.BatchHandler
		}
		// Start holds details about calls to the Start method.
		Start []struct {
		}
		// StateWait holds details about calls to the StateWait method.
		StateWait []struct {
			// State is the state argument value.
			State kafka.State
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
	lockChecker              sync.RWMutex
	lockClose                sync.RWMutex
	lockRegisterBatchHandler sync.RWMutex
	lockStart                sync.RWMutex
	lockStateWait            sync.RWMutex
	lockStop                 sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *KafkaConsumerMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("KafkaConsumerMock.CheckerFunc: method is nil but KafkaConsumer.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//
//	len(mockedKafkaConsumer.CheckerCalls())
func (mock *KafkaConsumerMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *KafkaConsumerMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("KafkaConsumerMock.CloseFunc: method is nil but KafkaConsumer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedKafkaConsumer.CloseCalls())
func (mock *KafkaConsumerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// RegisterBatchHandler calls RegisterBatchHandlerFunc.
func (mock *KafkaConsumerMock) RegisterBatchHandler(ctx context.Context, batchHandler kafka.BatchHandler) error {
	if mock.RegisterBatchHandlerFunc == nil {
		panic("KafkaConsumerMock.RegisterBatchHandlerFunc: method is nil but KafkaConsumer.RegisterBatchHandler was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		BatchHandler kafka.BatchHandler
	}{
		Ctx:          ctx,
		BatchHandler: batchHandler,
	}
	mock.lockRegisterBatchHandler.Lock()
	mock.calls.RegisterBatchHandler = append(mock.calls.RegisterBatchHandler, callInfo)
	mock.lockRegisterBatchHandler.Unlock()
	return mock.RegisterBatchHandlerFunc(ctx, batchHandler)
}

// RegisterBatchHandlerCalls gets all the calls that were made to RegisterBatchHandler.
// Check the length with:
//
//	len(mockedKafkaConsumer.RegisterBatchHandlerCalls())
func (mock *KafkaConsumerMock) RegisterBatchHandlerCalls() []struct {
	Ctx          context.Context
	BatchHandler kafka.BatchHandler
} {
	var calls []struct {
		Ctx          context.Context
		BatchHandler kafka.BatchHandler
	}
	mock.lockRegisterBatchHandler.RLock()
	calls = mock.calls.RegisterBatchHandler
	mock.lockRegisterBatchHandler.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *KafkaConsumerMock) Start() error {
	if mock.StartFunc == nil {
		panic("KafkaConsumerMock.StartFunc: method is nil but KafkaConsumer.Start was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc()
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedKafkaConsumer.StartCalls())
func (mock *KafkaConsumerMock) StartCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// StateWait calls StateWaitFunc.
func (mock *KafkaConsumerMock) StateWait(state kafka.State) {
	if mock.StateWaitFunc == nil {
		panic("KafkaConsumerMock.StateWaitFunc: method is nil but KafkaConsumer.StateWait was just called")
	}
	callInfo := struct {
		State kafka.State
	}{
		State: state,
	}
	mock.lockStateWait.Lock()
	mock.calls.StateWait = append(mock.calls.StateWait, callInfo)
	mock.lockStateWait.Unlock()
	mock.StateWaitFunc(state)
}

// StateWaitCalls gets all the calls that were made to StateWait.
// Check the length with:
//
//	len(mockedKafkaConsumer.StateWaitCalls())
func (mock *KafkaConsumerMock) StateWaitCalls() []struct {
	State kafka.State
} {
	var calls []struct {
		State kafka.State
	}
	mock.lockStateWait.RLock()
	calls = mock.calls.StateWait
	mock.lockStateWait.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *KafkaConsumerMock) Stop() error {
	if mock.StopFunc == nil {
		panic("KafkaConsumerMock.StopFunc: method is nil but KafkaConsumer.Stop was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	mock.lockStop.Unlock()
	return mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//
//	len(mockedKafkaConsumer.StopCalls())
func (mock *KafkaConsumerMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStop.RLock()
	calls = mock.calls.Stop
	mock.lockStop.RUnlock()
	return calls
}
