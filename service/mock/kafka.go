// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	kafkaV3 "github.com/ONSdigital/dp-kafka/v3"
	"github.com/ONSdigital/dp-static-file-publisher/service"
	"sync"
)

// Ensure, that KafkaConsumerV3Mock does implement service.KafkaConsumerV3.
// If this is not the case, regenerate this file with moq.
var _ service.KafkaConsumerV3 = &KafkaConsumerV3Mock{}

// KafkaConsumerV3Mock is a mock implementation of service.KafkaConsumerV3.
//
// 	func TestSomethingThatUsesKafkaConsumerV3(t *testing.T) {
//
// 		// make and configure a mocked service.KafkaConsumerV3
// 		mockedKafkaConsumerV3 := &KafkaConsumerV3Mock{
// 			RegisterHandlerFunc: func(ctx context.Context, h kafkaV3.Handler) error {
// 				panic("mock out the RegisterHandler method")
// 			},
// 			StartFunc: func() error {
// 				panic("mock out the Start method")
// 			},
// 		}
//
// 		// use mockedKafkaConsumerV3 in code that requires service.KafkaConsumerV3
// 		// and then make assertions.
//
// 	}
type KafkaConsumerV3Mock struct {
	// RegisterHandlerFunc mocks the RegisterHandler method.
	RegisterHandlerFunc func(ctx context.Context, h kafkaV3.Handler) error

	// StartFunc mocks the Start method.
	StartFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// RegisterHandler holds details about calls to the RegisterHandler method.
		RegisterHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// H is the h argument value.
			H kafkaV3.Handler
		}
		// Start holds details about calls to the Start method.
		Start []struct {
		}
	}
	lockRegisterHandler sync.RWMutex
	lockStart           sync.RWMutex
}

// RegisterHandler calls RegisterHandlerFunc.
func (mock *KafkaConsumerV3Mock) RegisterHandler(ctx context.Context, h kafkaV3.Handler) error {
	if mock.RegisterHandlerFunc == nil {
		panic("KafkaConsumerV3Mock.RegisterHandlerFunc: method is nil but KafkaConsumerV3.RegisterHandler was just called")
	}
	callInfo := struct {
		Ctx context.Context
		H   kafkaV3.Handler
	}{
		Ctx: ctx,
		H:   h,
	}
	mock.lockRegisterHandler.Lock()
	mock.calls.RegisterHandler = append(mock.calls.RegisterHandler, callInfo)
	mock.lockRegisterHandler.Unlock()
	return mock.RegisterHandlerFunc(ctx, h)
}

// RegisterHandlerCalls gets all the calls that were made to RegisterHandler.
// Check the length with:
//     len(mockedKafkaConsumerV3.RegisterHandlerCalls())
func (mock *KafkaConsumerV3Mock) RegisterHandlerCalls() []struct {
	Ctx context.Context
	H   kafkaV3.Handler
} {
	var calls []struct {
		Ctx context.Context
		H   kafkaV3.Handler
	}
	mock.lockRegisterHandler.RLock()
	calls = mock.calls.RegisterHandler
	mock.lockRegisterHandler.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *KafkaConsumerV3Mock) Start() error {
	if mock.StartFunc == nil {
		panic("KafkaConsumerV3Mock.StartFunc: method is nil but KafkaConsumerV3.Start was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc()
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedKafkaConsumerV3.StartCalls())
func (mock *KafkaConsumerV3Mock) StartCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}
