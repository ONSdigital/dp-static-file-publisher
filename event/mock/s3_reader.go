// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-static-file-publisher/event"
	"github.com/aws/aws-sdk-go/aws/session"
	"io"
	"sync"
)

// Ensure, that S3ReaderMock does implement event.S3Reader.
// If this is not the case, regenerate this file with moq.
var _ event.S3Reader = &S3ReaderMock{}

// S3ReaderMock is a mock implementation of event.S3Reader.
//
// 	func TestSomethingThatUsesS3Reader(t *testing.T) {
//
// 		// make and configure a mocked event.S3Reader
// 		mockedS3Reader := &S3ReaderMock{
// 			BucketNameFunc: func() string {
// 				panic("mock out the BucketName method")
// 			},
// 			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetFunc: func(key string) (io.ReadCloser, *int64, error) {
// 				panic("mock out the Get method")
// 			},
// 			SessionFunc: func() *session.Session {
// 				panic("mock out the Session method")
// 			},
// 		}
//
// 		// use mockedS3Reader in code that requires event.S3Reader
// 		// and then make assertions.
//
// 	}
type S3ReaderMock struct {
	// BucketNameFunc mocks the BucketName method.
	BucketNameFunc func() string

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// GetFunc mocks the Get method.
	GetFunc func(key string) (io.ReadCloser, *int64, error)

	// SessionFunc mocks the Session method.
	SessionFunc func() *session.Session

	// calls tracks calls to the methods.
	calls struct {
		// BucketName holds details about calls to the BucketName method.
		BucketName []struct {
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
		// Session holds details about calls to the Session method.
		Session []struct {
		}
	}
	lockBucketName sync.RWMutex
	lockChecker    sync.RWMutex
	lockGet        sync.RWMutex
	lockSession    sync.RWMutex
}

// BucketName calls BucketNameFunc.
func (mock *S3ReaderMock) BucketName() string {
	if mock.BucketNameFunc == nil {
		panic("S3ReaderMock.BucketNameFunc: method is nil but S3Reader.BucketName was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBucketName.Lock()
	mock.calls.BucketName = append(mock.calls.BucketName, callInfo)
	mock.lockBucketName.Unlock()
	return mock.BucketNameFunc()
}

// BucketNameCalls gets all the calls that were made to BucketName.
// Check the length with:
//     len(mockedS3Reader.BucketNameCalls())
func (mock *S3ReaderMock) BucketNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBucketName.RLock()
	calls = mock.calls.BucketName
	mock.lockBucketName.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *S3ReaderMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("S3ReaderMock.CheckerFunc: method is nil but S3Reader.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedS3Reader.CheckerCalls())
func (mock *S3ReaderMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *S3ReaderMock) Get(key string) (io.ReadCloser, *int64, error) {
	if mock.GetFunc == nil {
		panic("S3ReaderMock.GetFunc: method is nil but S3Reader.Get was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedS3Reader.GetCalls())
func (mock *S3ReaderMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Session calls SessionFunc.
func (mock *S3ReaderMock) Session() *session.Session {
	if mock.SessionFunc == nil {
		panic("S3ReaderMock.SessionFunc: method is nil but S3Reader.Session was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSession.Lock()
	mock.calls.Session = append(mock.calls.Session, callInfo)
	mock.lockSession.Unlock()
	return mock.SessionFunc()
}

// SessionCalls gets all the calls that were made to Session.
// Check the length with:
//     len(mockedS3Reader.SessionCalls())
func (mock *S3ReaderMock) SessionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSession.RLock()
	calls = mock.calls.Session
	mock.lockSession.RUnlock()
	return calls
}
